<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Programming on Justin MK Lam | Blog</title><link>https://justinmklam.com/tags/programming/</link><description>Recent content in Programming on Justin MK Lam | Blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Wed, 23 Nov 2022 12:31:53 -0800</lastBuildDate><atom:link href="https://justinmklam.com/tags/programming/index.xml" rel="self" type="application/rss+xml"/><item><title>Using Google Cloud Pubsub for Batch Pipelines in Apache Beam</title><link>https://justinmklam.com/posts/2022/11/apache-beam-pubsub/</link><pubDate>Wed, 23 Nov 2022 12:31:53 -0800</pubDate><guid>https://justinmklam.com/posts/2022/11/apache-beam-pubsub/</guid><description>&lt;p>Google Cloud&amp;rsquo;s &lt;a href="https://cloud.google.com/pubsub/docs/overview">Pub/Sub&lt;/a> is a useful service that provides an asynchronous and scalable messaging platform that decouples services producing messages from those that receive and process those messages. When combined with &lt;a href="https://github.com/apache/beam">Apache Beam&lt;/a> (and/or &lt;a href="https://cloud.google.com/dataflow/docs/about-dataflow">Dataflow&lt;/a>, Google&amp;rsquo;s managed version of it), you can quickly develop powerful batch and streaming pipelines for data-parallel processing.&lt;/p></description></item><item><title>Tips and Tricks with Terraform's null_resource</title><link>https://justinmklam.com/posts/2022/05/terraform-null-resource/</link><pubDate>Tue, 17 May 2022 20:21:37 -0800</pubDate><guid>https://justinmklam.com/posts/2022/05/terraform-null-resource/</guid><description>&lt;p>Terraform&amp;rsquo;s &lt;code>null_resource&lt;/code> resource can be useful when there aren&amp;rsquo;t any existing modules to satisfy your needs (with some caveats). &lt;a href="https://registry.terraform.io/providers/hashicorp/null/latest/docs/resources/resource">Hashicorp&amp;rsquo;s documentation&lt;/a> for it is a bit lacking, but fortunately there&amp;rsquo;s more information about the provisioners in their other docs &lt;a href="https://developer.hashicorp.com/terraform/language/resources/provisioners/syntax">here&lt;/a>. After using these resources in a handful of places across our infrastructure deployments, I&amp;rsquo;ve developed a small collection of tips I picked up over the past few months that I thought I&amp;rsquo;d share.&lt;/p></description></item><item><title>Deploying Google Cloud Functions with Terraform</title><link>https://justinmklam.com/posts/2022/03/deploy-cloud-functions-terraform/</link><pubDate>Tue, 08 Mar 2022 11:47:29 -0800</pubDate><guid>https://justinmklam.com/posts/2022/03/deploy-cloud-functions-terraform/</guid><description>&lt;p>Cloud Functions are an easy, performant, and potentially inexpensive way to build serverless backends. I recently went down the route of setting up continuous deployments for them, and thought I&amp;rsquo;d share my learnings with it.&lt;/p></description></item><item><title>Precision Sourdough: A Smart Lid for Your Starter</title><link>https://justinmklam.com/posts/2021/02/levain-monitor/</link><pubDate>Mon, 22 Feb 2021 16:36:18 +0000</pubDate><guid>https://justinmklam.com/posts/2021/02/levain-monitor/</guid><description>&lt;p>A few years ago, I had the idea to &lt;a href="https://justinmklam.com/posts/2018/06/sourdough-starter-monitor/">track my sourdough starter using computer vision&lt;/a>. It was neat to monitor it this way, but it was fairly impractical to do for each feeding since it required setting up a camera, downloading the images, and doing some manual image cropping before running it through my analysis script. The analysis was also only done after the fact, and what I really wanted was something that could tell me when the starter was ready to be used (or fed), or, if I missed the window of opportunity, how long ago it peaked.&lt;/p></description></item><item><title>Nordic nRF52 Development with Visual Studio Code</title><link>https://justinmklam.com/posts/2019/04/vscode-nrf52/</link><pubDate>Thu, 25 Apr 2019 14:14:25 -0700</pubDate><guid>https://justinmklam.com/posts/2019/04/vscode-nrf52/</guid><description>&lt;p>A few years ago, I created a &lt;a href="https://www.justinmklam.com/posts/2017/10/vscode-debugger-setup/">tutorial&lt;/a> on setting up Visual Studio Code for development with the STM32. Since I&amp;rsquo;ve also been developing on the Nordic nRF52, I thought I&amp;rsquo;d share another tutorial to show how a project can be set up, flashed, and debugged using Visual Studio Code.&lt;/p>
&lt;p>The template project discussed in this post can be found on &lt;a href="https://github.com/justinmklam/nrf52-blinky-demo">Github&lt;/a>.&lt;/p>
&lt;h1 id="instructions">Instructions&lt;/h1>
&lt;p>The Nordic toolchain is cross-platform, but the instructions below are specifically for Linux. However, they can easily be replicated in Windows as long as installation paths and environment variables are set correctly.&lt;/p></description></item><item><title>Monitoring the Fermentation of Sourdough Starter with Computer Vision</title><link>https://justinmklam.com/posts/2018/06/sourdough-starter-monitor/</link><pubDate>Sun, 24 Jun 2018 17:50:22 -0700</pubDate><guid>https://justinmklam.com/posts/2018/06/sourdough-starter-monitor/</guid><description>&lt;p>Bread, the quintessence of life. People have survived for centuries off this staple consisting only of flour, water, salt, and yeast. Try consuming all these ingredients separately, and you&amp;rsquo;ll be in for a digestive surprise. However, mix them together and let time do its thing, and the result is the release of profound flavour, texture, and nutrients that were previously locked away.&lt;/p>
&lt;p>Despite it being relatively easy to turn dough into something that looks and feels like bread, the challenge is in squeezing every possible ounce of flavour and texture (using only those four ingredients) to achieve the embodiment of a true loaf of bread. The secret to artisinal bread is &lt;strong>all in the fermentation.&lt;/strong> A baker&amp;rsquo;s skill is in their ability to manage and control the fermentation process, which is usually achieved through countless months and/or years of trial and error.&lt;/p></description></item><item><title>From Prototype to Cloud: A Python Recipe Converter</title><link>https://justinmklam.com/posts/2018/04/python-flask-heroku-tutorial/</link><pubDate>Fri, 06 Apr 2018 20:33:46 -0700</pubDate><guid>https://justinmklam.com/posts/2018/04/python-flask-heroku-tutorial/</guid><description>&lt;p>In case the title wasn&amp;rsquo;t clear, this blog post is about developing a web application using the Python programming language using Jupyter Lab, Flask, and the Heroku platform. If you were looking for an article on python recipes, you can start off with this one on making a &lt;a href="https://mobile-cuisine.com/recipes/recipe-poached-burmese-python-curry/">poached Burmese python curry&lt;/a>.&lt;/p>
&lt;h1 id="the-backstory">The Backstory&lt;/h1>
&lt;p>The problem with online baking recipes is that the majority of them use volumetric units. As any civilized baker would know, Patricia&amp;rsquo;s 1 cup of flour may very well be different than Patrick&amp;rsquo;s 1 cup of flour. Maybe Patricia sifted her flour. Maybe Patrick&amp;rsquo;s organic flour is a finer texture. Maybe both Pats &lt;strong>should measure by mass instead of volume&lt;/strong> to avoid all this confusion in the first place.&lt;/p></description></item><item><title>Synchronous vs Asynchronous Ping Sweep in C# Windows Form</title><link>https://justinmklam.com/posts/2018/02/ping-sweeper/</link><pubDate>Fri, 09 Feb 2018 17:02:25 -0800</pubDate><guid>https://justinmklam.com/posts/2018/02/ping-sweeper/</guid><description>&lt;p>As a mechatronics engineer (in training), sometimes I like to pretend that I also know how to program.&lt;/p>
&lt;p>In my most recent adventures to software land at &lt;a href="https://mistywest.com/">MistyWest&lt;/a>, I needed to write an application in C# that involved doing a ping sweep to find devices that were physically connected through ethernet. Since Google and Stack Overflow are my two best friends, I was able to find (what seemed to be) an off-the-net solution quite quickly.&lt;/p></description></item><item><title>Debugger Setup with GDB + OpenOCD in Visual Studio Code</title><link>https://justinmklam.com/posts/2017/10/vscode-debugger-setup/</link><pubDate>Sun, 29 Oct 2017 14:24:52 -0700</pubDate><guid>https://justinmklam.com/posts/2017/10/vscode-debugger-setup/</guid><description>&lt;p>&lt;a href="https://code.visualstudio.com/">Visual Studio Code&amp;rsquo;s&lt;/a> combination of functionality, customizability, and aesthetics makes it one of my favourite code editors. As such, I was set on making it work with embedded development since I was getting started with the STM32 line of microcontrollers. I was following the steps outlined in &lt;a href="https://leanpub.com/mastering-stm32">Mastering STM32&lt;/a> by Carmine Noviello (which is an excellent resource) until it said to use Eclipse, because life&amp;rsquo;s too short to use software with unnecessary bloat. Enter VS Code and someone wanting to use the latest and greatest in code editors.&lt;/p></description></item><item><title>Overhead Robotic Gantry for Tethered VR Headsets</title><link>https://justinmklam.com/posts/2017/04/vr-gantry/</link><pubDate>Tue, 04 Apr 2017 09:26:50 -0800</pubDate><guid>https://justinmklam.com/posts/2017/04/vr-gantry/</guid><description>&lt;h1 id="project-overview">Project Overview&lt;/h1>
&lt;p>&lt;strong>Objective:&lt;/strong> Create an autonomous gantry to follow the HTC Vive headset around, keeping its cable behind the user at all times.&lt;/p>
&lt;p>&lt;strong>Motivation:&lt;/strong> An extravagant party prop for an evening at CES 2017, hosted by MistyWest.&lt;/p>
&lt;p>&lt;strong>Features:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>CoreXY planar gantry design&lt;/li>
&lt;li>System built with 8020 aluminum extrusions and laser cut acrylic components&lt;/li>
&lt;li>Stepper motor control through Teensy 3.2&lt;/li>
&lt;li>HTC Vive pose tracking through C++&lt;/li>
&lt;li>Patent pending&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Skills:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Mechanical design with rapid prototyping methods&lt;/li>
&lt;li>C++ software development&lt;/li>
&lt;li>Arduino-based firmware development&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Sources:&lt;/strong>&lt;/p></description></item><item><title>ESP8266 Sous Vide Controller</title><link>https://justinmklam.com/posts/2017/05/sous-vide-controller/</link><pubDate>Sun, 05 Feb 2017 12:28:27 -0800</pubDate><guid>https://justinmklam.com/posts/2017/05/sous-vide-controller/</guid><description>&lt;h1 id="project-summary">Project Summary&lt;/h1>
&lt;p>&lt;strong>Objective:&lt;/strong> Create a small, modular controller to regulate the temperature of a water bath.&lt;/p>
&lt;p>&lt;strong>Motivation:&lt;/strong> To get in on this cooking fad without dropping fat stacks of cash on an immersion circulator.&lt;/p>
&lt;p>&lt;strong>Features:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Crisp 0.96&amp;quot; OLED display&lt;/li>
&lt;li>Pushbutton rotary encoder provides simple user interaction&lt;/li>
&lt;li>Removable temperature plug through standard 3-pos audio connector&lt;/li>
&lt;li>Temperature controlled outlet to be used with any heating element (ie. rice cooker, slow cooker, etc.)&lt;/li>
&lt;li>Always on outlet for water circulator&lt;/li>
&lt;li>Temperature logging over wifi&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Source:&lt;/strong> &lt;a href="https://github.com/justinmklam/sous-vide">Github&lt;/a>&lt;/p></description></item><item><title>Engineer's Diary</title><link>https://justinmklam.com/posts/2016/10/engineers-diary/</link><pubDate>Sat, 01 Oct 2016 11:34:47 -0700</pubDate><guid>https://justinmklam.com/posts/2016/10/engineers-diary/</guid><description>&lt;p>&lt;strong>Background:&lt;/strong> Between paper notebooks, post-it notes, OneNote, Evernote, and so many more, there is no shortage of ways to write things down. Each has its strengths and weaknesses, but none satisfied my requirements to act as a daily work log to record key events, thoughts, and milestones during my work day.&lt;/p>
&lt;p>My paper notebook is excellent for free-form thoughts, sketches, and calculations, but I would want to keep a separate notebook to keep track of these sequential events. We use OneNote at work, but where the infinite blank canvas is a strength in applications such as for research or brainstorming, I found it to be a weakness in record keeping since the document is too easy to edit and &amp;ldquo;fragile&amp;rdquo;.&lt;/p></description></item><item><title>The Making of Project Haikuza: Part 2</title><link>https://justinmklam.com/posts/2015/making-haikuza-ii/</link><pubDate>Thu, 06 Aug 2015 23:49:59 -0700</pubDate><guid>https://justinmklam.com/posts/2015/making-haikuza-ii/</guid><description>&lt;p>&lt;em>The format of this series is an outline of my thought process during the development of &lt;a href="https://justinmklam.com/projects/software/haikuza/">@thehaikuza&lt;/a>.&lt;/em>&lt;/p>
&lt;blockquote style="text-align:center">
Poetry is hard
&lt;br>To write when algorithms
&lt;br>Are extremely dumb.
&lt;/blockquote>
&lt;p>I dont want my haiku generator to be a vegetarian chef. There&amp;rsquo;s nothing wrong with always making word salad, but eventually it&amp;rsquo;ll have to learn to make fancier things. A poetic risotto would be nice from time to time.&lt;/p>
&lt;p>Leaving @thehaikuza to make complete gibberish wasnt what I had intended. I envisioned my algorithm to be able to reconstruct bad haikus, but definitely not as crappy as the ones it actually made. My idea of bad had more to do with this xkcd comic:&lt;/p></description></item><item><title>The Making of Project Haikuza: Part 1</title><link>https://justinmklam.com/posts/2015/making-haikuza-i/</link><pubDate>Sun, 12 Jul 2015 23:49:52 -0700</pubDate><guid>https://justinmklam.com/posts/2015/making-haikuza-i/</guid><description>&lt;p>&lt;em>The format of this series is an outline of my thought process during the development of &lt;a href="https://justinmklam.com/projects/software/haikuza/">@thehaikuza&lt;/a>.&lt;/em>&lt;/p>
&lt;blockquote style="text-align:center">
Haikus are simple
&lt;br>Even children can write them
&lt;br>maybe programs too?
&lt;/blockquote>
&lt;p>Nothing is cooler than algorithmic poetry. Except for maybe Carl Sagan. I heard he was a pretty cool guy.&lt;/p>
&lt;p>I was listening to the radio while driving home one Sunday evening, and an ad came up for a university that was submitting computer-generated poetry to a literature competition. I&amp;rsquo;ve recently been fascinated by the many intricacies of the English language, so the thought of somehow teaching a computer how to construct proper phrases seemed like an elusive task. But hey, if Google is also working on natural language processing, then how hard can it be?&lt;/p></description></item><item><title>Project Haikuza</title><link>https://justinmklam.com/posts/2015/07/haikuza/</link><pubDate>Fri, 10 Jul 2015 11:42:26 -0700</pubDate><guid>https://justinmklam.com/posts/2015/07/haikuza/</guid><description>&lt;p>&lt;strong>Objective:&lt;/strong> Develop an algorithm to generate haikus using song lyrics.&lt;/p>&lt;/p>
&lt;p>&lt;strong>Motivation:&lt;/strong> Because computational linguistics are cool.&lt;/p>&lt;/p>
&lt;p>&lt;strong>Project:&lt;/strong> &lt;a href="https://twitter.com/thehaikuza">twitter.com/thehaikuza&lt;/a>&lt;/p>
&lt;p>&lt;strong>Features:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Scrapes &lt;a href="http://www.vancouver.virginradio.ca/broadcasthistory.aspx">Virgin Radio&amp;rsquo;s broadcast history&lt;/a> to find recently played songs&lt;/li>
&lt;li>Creates a song-based haiku queue in &lt;a href="https://docs.google.com/spreadsheets/d/1HazfuywY_MrmQ49fxSpHOMA8QXBUYVhEDx1e4qhjbqU/edit?usp=sharing">Google Sheets&lt;/a>&lt;/li>
&lt;li>Generates a haiku using the queue as a reference and posts it on Twitter&lt;/li>
&lt;li>Checks for new tweets every 5 minutes and generates a relevant haiku, if requested&lt;/li>
&lt;li>Finds all song lyrics from &lt;a href="http://lyrics.wikia.com/Lyrics_Wiki">Lyrics Wikia&lt;/a>&lt;/li>
&lt;li>Runs on a Raspberry Pi&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Challenges:&lt;/strong>&lt;/p></description></item><item><title>External Ballistics Simulation</title><link>https://justinmklam.com/posts/2015/02/external-ballistics/</link><pubDate>Thu, 19 Feb 2015 11:38:35 -0700</pubDate><guid>https://justinmklam.com/posts/2015/02/external-ballistics/</guid><description>&lt;p>&lt;strong>Background:&lt;/strong> including (but not limited to) drag, gravity, air density, altitude, rotation of the bullet, and rotation of the Earth.&lt;/p>
&lt;p>One solution is to connect a computer to a manual targeting system (ie. a scope) and estimate the corrected target location by accounting for these external factors.  The user may then line the manual targeting system up with the corrected target location, hoping to the high heavens that the target will be hit upon releasing the projectile.&lt;/p></description></item><item><title>MATLAB Photo Editing Script</title><link>https://justinmklam.com/posts/2014/01/photo-editing/</link><pubDate>Sun, 12 Jan 2014 11:45:14 -0700</pubDate><guid>https://justinmklam.com/posts/2014/01/photo-editing/</guid><description>&lt;p>&lt;strong>Objective:&lt;/strong> Develop a script to find and remove any differences in a series of photos.&lt;/p>
&lt;p>&lt;strong>Motivation:&lt;/strong> &lt;a href="http://toomanyadapters.com/how-to-remove-people-travel-photos-photoshop/">How to Remove People From Your Travel Using Photoshop&lt;/a>&lt;/p>
&lt;p>&lt;strong>Framework:&lt;/strong> MATLAB&lt;/p>
&lt;div class="row captioned-img">
 &lt;a href=https://justinmklam.com/imgs/photo_editing/Image-test_all.png>&lt;img class="img-responsive img-content" src=https://justinmklam.com/imgs/photo_editing/Image-test_all.png />&lt;/a>
 &lt;p class="caption">Script takes any number of images (preferably taken on a tripod) and combines them into one cleaned-up image.&lt;/p>
&lt;/div>

&lt;div class="row captioned-img">
 &lt;a href=https://justinmklam.com/imgs/photo_editing/Photo-editing-script-algorithm.png>&lt;img class="img-responsive img-content" src=https://justinmklam.com/imgs/photo_editing/Photo-editing-script-algorithm.png />&lt;/a>
 &lt;p class="caption">Flowchart of the implemented algorithm.&lt;/p>
&lt;/div></description></item></channel></rss>