<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Embedded on Justin MK Lam | Blog</title><link>http://justinmklam.com/tags/embedded/</link><description>Recent content in Embedded on Justin MK Lam | Blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 22 Feb 2021 16:36:18 +0000</lastBuildDate><atom:link href="http://justinmklam.com/tags/embedded/index.xml" rel="self" type="application/rss+xml"/><item><title>Precision Sourdough: A Smart Lid for Your Starter</title><link>http://justinmklam.com/posts/2021/02/levain-monitor/</link><pubDate>Mon, 22 Feb 2021 16:36:18 +0000</pubDate><guid>http://justinmklam.com/posts/2021/02/levain-monitor/</guid><description>&lt;p>A few years ago, I had the idea to &lt;a href="http://justinmklam.com/posts/2018/06/sourdough-starter-monitor/">track my sourdough starter using computer vision&lt;/a>. It was neat to monitor it this way, but it was fairly impractical to do for each feeding since it required setting up a camera, downloading the images, and doing some manual image cropping before running it through my analysis script. The analysis was also only done after the fact, and what I really wanted was something that could tell me when the starter was ready to be used (or fed), or, if I missed the window of opportunity, how long ago it peaked.&lt;/p></description></item><item><title>Nordic nRF52 Development with Visual Studio Code</title><link>http://justinmklam.com/posts/2019/04/vscode-nrf52/</link><pubDate>Thu, 25 Apr 2019 14:14:25 -0700</pubDate><guid>http://justinmklam.com/posts/2019/04/vscode-nrf52/</guid><description>&lt;p>A few years ago, I created a &lt;a href="https://www.justinmklam.com/posts/2017/10/vscode-debugger-setup/">tutorial&lt;/a> on setting up Visual Studio Code for development with the STM32. Since I&amp;rsquo;ve also been developing on the Nordic nRF52, I thought I&amp;rsquo;d share another tutorial to show how a project can be set up, flashed, and debugged using Visual Studio Code.&lt;/p>
&lt;p>The template project discussed in this post can be found on &lt;a href="https://github.com/justinmklam/nrf52-blinky-demo">Github&lt;/a>.&lt;/p>
&lt;h1 id="instructions">Instructions&lt;/h1>
&lt;p>The Nordic toolchain is cross-platform, but the instructions below are specifically for Linux. However, they can easily be replicated in Windows as long as installation paths and environment variables are set correctly.&lt;/p></description></item><item><title>Debugger Setup with GDB + OpenOCD in Visual Studio Code</title><link>http://justinmklam.com/posts/2017/10/vscode-debugger-setup/</link><pubDate>Sun, 29 Oct 2017 14:24:52 -0700</pubDate><guid>http://justinmklam.com/posts/2017/10/vscode-debugger-setup/</guid><description>&lt;p>&lt;a href="https://code.visualstudio.com/">Visual Studio Code&amp;rsquo;s&lt;/a> combination of functionality, customizability, and aesthetics makes it one of my favourite code editors. As such, I was set on making it work with embedded development since I was getting started with the STM32 line of microcontrollers. I was following the steps outlined in &lt;a href="https://leanpub.com/mastering-stm32">Mastering STM32&lt;/a> by Carmine Noviello (which is an excellent resource) until it said to use Eclipse, because life&amp;rsquo;s too short to use software with unnecessary bloat. Enter VS Code and someone wanting to use the latest and greatest in code editors.&lt;/p></description></item><item><title>ESP8266 Sous Vide Controller</title><link>http://justinmklam.com/posts/2017/05/sous-vide-controller/</link><pubDate>Sun, 05 Feb 2017 12:28:27 -0800</pubDate><guid>http://justinmklam.com/posts/2017/05/sous-vide-controller/</guid><description>&lt;h1 id="project-summary">Project Summary&lt;/h1>
&lt;p>&lt;strong>Objective:&lt;/strong> Create a small, modular controller to regulate the temperature of a water bath.&lt;/p>
&lt;p>&lt;strong>Motivation:&lt;/strong> To get in on this cooking fad without dropping fat stacks of cash on an immersion circulator.&lt;/p>
&lt;p>&lt;strong>Features:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Crisp 0.96&amp;quot; OLED display&lt;/li>
&lt;li>Pushbutton rotary encoder provides simple user interaction&lt;/li>
&lt;li>Removable temperature plug through standard 3-pos audio connector&lt;/li>
&lt;li>Temperature controlled outlet to be used with any heating element (ie. rice cooker, slow cooker, etc.)&lt;/li>
&lt;li>Always on outlet for water circulator&lt;/li>
&lt;li>Temperature logging over wifi&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Source:&lt;/strong> &lt;a href="https://github.com/justinmklam/sous-vide">Github&lt;/a>&lt;/p></description></item></channel></rss>